openapi: 3.0.3
info:
  title: ul-api
  description: Ledger API for Finternet
  contact:
    name: abishekk92
    email: me@shek.dev
  license:
    name: MIT
  version: 0.1.0
paths:
  /healthcheck:
    get:
      tags:
        - health
      summary: GET handler for checking service health.
      description: GET handler for checking service health.
      operationId: healthcheck
      responses:
        "200":
          description: ul-api healthy
        "500":
          description: ul-api not healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /ping:
    get:
      tags:
        - ping
      summary: GET handler for internal pings and availability
      description: GET handler for internal pings and availability
      operationId: get
      responses:
        "200":
          description: Ping successful
        "500":
          description: Ping not successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /v1/ledger/identity:
    post:
      tags:
        - identity
      summary: Create a new identity
      description: Create a new identity
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewIdentity'
        required: true
      responses:
        "200":
          description: Identity created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCode'
        "500":
          description: Identity creation wasn't successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /v1/ledger/identity/:id/asset_units:
    get:
      tags:
        - identity
      summary: Get asset_units of an identity.
      description: Get asset_units of an identity.
      operationId: get_asset_units
      parameters:
        - name: id
          in: path
          description: Public key (or) signing key of the identity
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Asset Units retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCode'
        "404":
          description: Identity not found
        "500":
          description: Asset Units retrieval wasn't successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /v1/ledger/identity/:id/close:
    delete:
      tags:
        - identity
      summary: Close an identity. This is a soft delete, the identity can't be removed from the ledger since it's immutable.
      description: Close an identity. This is a soft delete, the identity can't be removed from the ledger since it's immutable.
      operationId: close
      parameters:
        - name: id
          in: path
          description: Public key (or) signing key of the identity
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Identity closed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCode'
        "404":
          description: Identity not found
        "500":
          description: Identity closing wasn't successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /v1/ledger/identity/:id/rotate_key:
    post:
      tags:
        - identity
      summary: Rotate key to change the signing key of an existing identity.
      description: Rotate key to change the signing key of an existing identity.
      operationId: rotate_key
      parameters:
        - name: id
          in: path
          description: Public key (or) signing key of the identity
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RotateKey'
        required: true
      responses:
        "200":
          description: Identity updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCode'
        "404":
          description: Identity not found
        "500":
          description: Identity update wasn't successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /v1/ledger/smartcontract:
    post:
      tags:
        - smartcontract
      summary: Deploy a new smartcontract.
      description: Deploy a new smartcontract.
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSmartContract'
        required: true
      responses:
        "200":
          description: smartcontract successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCode'
        "500":
          description: smartcontract deployment not successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /v1/ledger/smartcontract/:smartcontract_address/close:
    post:
      tags:
        - smartcontract
      summary: Close a smartcontract. This is a soft delete, the smartcontract can't be removed from the ledger since it's immutable.
      description: Close a smartcontract. This is a soft delete, the smartcontract can't be removed from the ledger since it's immutable.
      operationId: close
      responses:
        "200":
          description: Smartcontract successfully closed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCode'
        "404":
          description: Smartcontract not found
        "500":
          description: Smartcontract could not be closed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /v1/ledger/smartcontract/:smartcontract_address/freeze_upgrade:
    post:
      tags:
        - smartcontract
      summary: Freeze a smartcontract from future upgrades.
      description: Freeze a smartcontract from future upgrades.
      operationId: freeze_upgrade
      responses:
        "200":
          description: Smartcontract successfully frozen from upgrades
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCode'
        "404":
          description: Smartcontract not found
        "500":
          description: Smartcontract could not be froze from upgrades
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /v1/ledger/smartcontract/:smartcontract_address/upgrade:
    post:
      tags:
        - smartcontract
      summary: Upgrade a smartcontract with a new binary.
      description: Upgrade a smartcontract with a new binary.
      operationId: upgrade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeSmartContract'
        required: true
      responses:
        "200":
          description: Smartcontract successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCode'
        "404":
          description: Smartcontract not found
        "500":
          description: Smartcontract could not be updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /v1/ledger/smartcontract/dry_run:
    post:
      tags:
        - smartcontract
      summary: Submit a transaction to be dry run.
      description: Submit a transaction to be dry run.
      operationId: dry_run
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        "200":
          description: Dry run successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCode'
        "404":
          description: Smartcontract not found
        "500":
          description: Dry run failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /v1/ledger/smartcontract/estimate_fee:
    post:
      tags:
        - smartcontract
      summary: Submit a transaction to get an estimate of the fee.
      description: Submit a transaction to get an estimate of the fee.
      operationId: estimate_fee
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        "200":
          description: Fee estimate for executing the transaction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCode'
        "404":
          description: Smartcontract not found
        "500":
          description: Fee could not be estimated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /v1/ledger/smartcontract/execute:
    post:
      tags:
        - smartcontract
      summary: Submit a transaction to be executed.
      description: Submit a transaction to be executed.
      operationId: execute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
        required: true
      responses:
        "200":
          description: Smartcontract successfully executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusCode'
        "404":
          description: Smartcontract not found
        "500":
          description: Smartcontract could not be executed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
components:
  schemas:
    AppError:
      type: object
      description: |-
        Encodes [JSONAPI error object responses](https://jsonapi.org/examples/#error-objects).

        JSONAPI error object -  ALL Fields are technically optional.

        This struct uses the following guidelines:

        1. Always encode the StatusCode of the response
        2. Set the title to the `canonical_reason` of the status code.
        According to spec, this should NOT change over time.
        3. For unrecoverable errors, encode the detail as the to_string of the error

        Other fields not currently captured (but can be added)

        - id - a unique identifier for the problem
        - links - a link object with further information about the problem
        - source - a JSON pointer indicating a problem in the request json OR
        a parameter specifying a problematic query parameter
        - meta - a meta object containing arbitrary information about the error
      required:
        - status
      properties:
        detail:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          example: 200
          minimum: 0
        title:
          type: string
          nullable: true
    Context:
      type: object
      description: Context
      required:
        - contract_address
        - method
        - raw_args
      properties:
        contract_address:
          $ref: '#/components/schemas/PublicKey'
        method:
          type: string
        raw_args:
          type: string
          format: binary
    NewIdentity:
      type: object
      description: New identity request.
      required:
        - signing_key
        - message
        - signature
      properties:
        message:
          type: string
        signature:
          $ref: '#/components/schemas/Signature'
        signing_key:
          $ref: '#/components/schemas/PublicKey'
    NewSmartContract:
      type: object
      description: Deploy a new smartcontract.
      required:
        - binary_url
        - binary_checksum
        - signature
      properties:
        binary_checksum:
          type: string
        binary_url:
          type: string
        signature:
          $ref: '#/components/schemas/Signature'
    PublicKey:
      type: string
      format: binary
      description: Public key or signing key.
    RotateKey:
      type: object
      description: Rotate key to change the signing key of an existing identity.
      required:
        - signing_key
        - message
        - signature
      properties:
        message:
          type: string
        signature:
          $ref: '#/components/schemas/Signature'
        signing_key:
          $ref: '#/components/schemas/PublicKey'
    Signature:
      type: string
      format: binary
      description: Signature
    SignatureRecord:
      type: object
      description: SignatureRecord
      required:
        - signer
        - signature
      properties:
        signature:
          $ref: '#/components/schemas/Signature'
        signer:
          $ref: '#/components/schemas/PublicKey'
    SmartContractTransaction:
      type: object
      description: SmartContractTransaction
      required:
        - payload
        - signatures
      properties:
        payload:
          type: array
          items:
            $ref: '#/components/schemas/Context'
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/SignatureRecord'
    UpgradeSmartContract:
      type: object
      description: Upgrade a smartcontract with a new binary.
      required:
        - binary_url
        - binary_checksum
        - signature
      properties:
        binary_checksum:
          type: string
        binary_url:
          type: string
        signature:
          $ref: '#/components/schemas/Signature'
tags:
  - name: Finternet Unified Ledger API
    description: Finternet Unified Ledger API
